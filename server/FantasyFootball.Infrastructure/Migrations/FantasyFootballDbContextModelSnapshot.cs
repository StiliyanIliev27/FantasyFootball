// <auto-generated />
using System;
using FantasyFootball.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FantasyFootball.Infrastructure.Migrations
{
    [DbContext(typeof(FantasyFootballDbContext))]
    partial class FantasyFootballDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FantasyFootball.Infrastructure.Data.Models.FantasyTeam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FantasyTeams");
                });

            modelBuilder.Entity("FantasyFootball.Infrastructure.Data.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("TeamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = "2b01eecc-2875-40c3-a75c-b433be72d805",
                            FirstName = "Alisson",
                            LastName = "Becker",
                            MarketValue = 60000000m,
                            Nationality = "Brazil",
                            Position = 0,
                            TeamId = "b3241106-0d85-4c91-aaa9-5c1a37dc2553"
                        },
                        new
                        {
                            Id = "2aff1ec4-706a-45d4-87de-d4a2f476a4cb",
                            FirstName = "Thibaut",
                            LastName = "Courtois",
                            MarketValue = 55000000m,
                            Nationality = "Belgium",
                            Position = 0,
                            TeamId = "506eb3fc-7511-4af8-86de-11b55623deca"
                        },
                        new
                        {
                            Id = "b409424b-07ad-4964-92f8-458ac19d97c8",
                            FirstName = "Virgil",
                            LastName = "van Dijk",
                            MarketValue = 70000000m,
                            Nationality = "Netherlands",
                            Position = 1,
                            TeamId = "b3241106-0d85-4c91-aaa9-5c1a37dc2553"
                        },
                        new
                        {
                            Id = "34ebb98a-6208-4f8c-a775-f37814981825",
                            FirstName = "Rúben",
                            LastName = "Dias",
                            MarketValue = 75000000m,
                            Nationality = "Portugal",
                            Position = 1,
                            TeamId = "4eb0819d-5550-4399-8752-edba2fc7ab42"
                        },
                        new
                        {
                            Id = "f7a59c84-0d95-4ccb-92aa-90c747a3757a",
                            FirstName = "João",
                            LastName = "Cancelo",
                            MarketValue = 65000000m,
                            Nationality = "Portugal",
                            Position = 3,
                            TeamId = "74c1fcab-b9d6-4b6f-aeef-6ece83923c32"
                        },
                        new
                        {
                            Id = "40fa0d95-6b2c-4ed1-bcfc-5753a5d3e89b",
                            FirstName = "Theo",
                            LastName = "Hernández",
                            MarketValue = 60000000m,
                            Nationality = "France",
                            Position = 2,
                            TeamId = "1811b66c-462b-46a9-9c4a-344d310c329e"
                        },
                        new
                        {
                            Id = "571d21cd-431b-4077-8768-021273506b5a",
                            FirstName = "Kevin",
                            LastName = "De Bruyne",
                            MarketValue = 80000000m,
                            Nationality = "Belgium",
                            Position = 8,
                            TeamId = "4eb0819d-5550-4399-8752-edba2fc7ab42"
                        },
                        new
                        {
                            Id = "6fd6535a-158d-474a-90f5-966f8d5e10fa",
                            FirstName = "Luka",
                            LastName = "Modrić",
                            MarketValue = 20000000m,
                            Nationality = "Croatia",
                            Position = 7,
                            TeamId = "506eb3fc-7511-4af8-86de-11b55623deca"
                        },
                        new
                        {
                            Id = "fd74593a-2792-4372-9a16-0fcdfb0ac709",
                            FirstName = "Rodri",
                            LastName = "Hernandez",
                            MarketValue = 70000000m,
                            Nationality = "Spain",
                            Position = 6,
                            TeamId = "4eb0819d-5550-4399-8752-edba2fc7ab42"
                        },
                        new
                        {
                            Id = "8704944f-63ac-44e7-81a0-f7888f948030",
                            FirstName = "Federico",
                            LastName = "Valverde",
                            MarketValue = 85000000m,
                            Nationality = "Uruguay",
                            Position = 10,
                            TeamId = "506eb3fc-7511-4af8-86de-11b55623deca"
                        },
                        new
                        {
                            Id = "62bc10b0-af3e-4da3-9437-bab5863d8baf",
                            FirstName = "Kylian",
                            LastName = "Mbappé",
                            MarketValue = 180000000m,
                            Nationality = "France",
                            Position = 14,
                            TeamId = "c23f5056-0bf2-4cbe-92b3-7dfdcc226ece"
                        },
                        new
                        {
                            Id = "b01088ae-a53a-4852-8878-4edf32e48d01",
                            FirstName = "Erling",
                            LastName = "Haaland",
                            MarketValue = 200000000m,
                            Nationality = "Norway",
                            Position = 11,
                            TeamId = "4eb0819d-5550-4399-8752-edba2fc7ab42"
                        },
                        new
                        {
                            Id = "826f7528-0817-4a04-8d70-d8d701e48c49",
                            FirstName = "Lionel",
                            LastName = "Messi",
                            MarketValue = 40000000m,
                            Nationality = "Argentina",
                            Position = 15,
                            TeamId = "aefd72fb-edfe-4239-bdec-21fea1ad49cb"
                        },
                        new
                        {
                            Id = "a7ea93ed-d79e-46c2-8b16-818a192c3c22",
                            FirstName = "Harry",
                            LastName = "Kane",
                            MarketValue = 100000000m,
                            Nationality = "England",
                            Position = 12,
                            TeamId = "0b9e12ef-bc06-4ba8-a660-fcd52285258c"
                        });
                });

            modelBuilder.Entity("FantasyFootball.Infrastructure.Data.Models.PlayerFantasyTeam", b =>
                {
                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FantasyTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerId", "FantasyTeamId");

                    b.HasIndex("FantasyTeamId");

                    b.ToTable("PlayersFantasyTeams");
                });

            modelBuilder.Entity("FantasyFootball.Infrastructure.Data.Models.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HomeCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTown")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamIconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = "b3241106-0d85-4c91-aaa9-5c1a37dc2553",
                            HomeCountry = "England",
                            HomeTown = "Liverpool",
                            Name = "Liverpool",
                            TeamIconUrl = "https://upload.wikimedia.org/wikipedia/en/0/0c/Liverpool_FC.svg"
                        },
                        new
                        {
                            Id = "506eb3fc-7511-4af8-86de-11b55623deca",
                            HomeCountry = "Spain",
                            HomeTown = "Madrid",
                            Name = "Real Madrid",
                            TeamIconUrl = "https://upload.wikimedia.org/wikipedia/en/5/56/Real_Madrid_CF.svg"
                        },
                        new
                        {
                            Id = "4eb0819d-5550-4399-8752-edba2fc7ab42",
                            HomeCountry = "England",
                            HomeTown = "Manchester",
                            Name = "Manchester City",
                            TeamIconUrl = "https://upload.wikimedia.org/wikipedia/en/e/eb/Manchester_City_FC_badge.svg"
                        },
                        new
                        {
                            Id = "74c1fcab-b9d6-4b6f-aeef-6ece83923c32",
                            HomeCountry = "Spain",
                            HomeTown = "Barcelona",
                            Name = "Barcelona",
                            TeamIconUrl = "https://upload.wikimedia.org/wikipedia/en/4/47/FC_Barcelona_%28crest%29.svg"
                        },
                        new
                        {
                            Id = "1811b66c-462b-46a9-9c4a-344d310c329e",
                            HomeCountry = "Italy",
                            HomeTown = "Milan",
                            Name = "AC Milan",
                            TeamIconUrl = "https://upload.wikimedia.org/wikipedia/en/d/d0/AC_Milan_logo.svg"
                        },
                        new
                        {
                            Id = "c23f5056-0bf2-4cbe-92b3-7dfdcc226ece",
                            HomeCountry = "France",
                            HomeTown = "Paris",
                            Name = "Paris Saint-Germain",
                            TeamIconUrl = "https://upload.wikimedia.org/wikipedia/en/a/a7/Paris_Saint-Germain_F.C..svg"
                        },
                        new
                        {
                            Id = "aefd72fb-edfe-4239-bdec-21fea1ad49cb",
                            HomeCountry = "USA",
                            HomeTown = "Miami",
                            Name = "Inter Miami",
                            TeamIconUrl = "https://upload.wikimedia.org/wikipedia/en/4/4a/Inter_Miami_CF_logo.svg"
                        },
                        new
                        {
                            Id = "0b9e12ef-bc06-4ba8-a660-fcd52285258c",
                            HomeCountry = "Germany",
                            HomeTown = "Munich",
                            Name = "Bayern Munich",
                            TeamIconUrl = "https://upload.wikimedia.org/wikipedia/commons/1/1c/FC_Bayern_München_logo_%282017%29.svg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FantasyFootball.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("FantasyFootball.Infrastructure.Data.Models.FantasyTeam", b =>
                {
                    b.HasOne("FantasyFootball.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FantasyFootball.Infrastructure.Data.Models.Player", b =>
                {
                    b.HasOne("FantasyFootball.Infrastructure.Data.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FantasyFootball.Infrastructure.Data.Models.PlayerFantasyTeam", b =>
                {
                    b.HasOne("FantasyFootball.Infrastructure.Data.Models.FantasyTeam", "FantasyTeam")
                        .WithMany()
                        .HasForeignKey("FantasyTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyFootball.Infrastructure.Data.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FantasyTeam");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
